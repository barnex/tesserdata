// +build ignore

// Statiscal analysis of output generated by tesserstamp.
package main

import (
	"flag"
	"log"
	"os"
)

var (
	flag_res = flag.Float64("res", 10, "Time resolution in seconds")
)

func main() {
	log.SetFlags(0)

	flag.Parse()
	if flag.NArg() != 1 {
		log.Fatal("need 1 arg: timestamp file")
	}

	f, errOpen := os.Open(flag.Arg(0))
	check(errOpen)
	defer f.Close()

	a, b, total := scanStamps(f)

	rateA := fragRate(a, *flag_res)
	rateB := fragRate(b, *flag_res)
	time := makeTime(total, *flag_res)

	printTable(time, rateA, rateB)
}

func fragRate(s []float64, res float64) []float64 {
	tmax := s[len(s)-1]
	imax := int(tmax / res)
	rate := make([]float64, imax+1)
	weight := 1 / res
	for _, t := range s {
		i := int(t / res)
		rate[i] += weight
	}
	return rate
}
